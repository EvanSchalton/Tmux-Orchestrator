{
  "timestamp": "2025-08-17T14:13:30.523373",
  "generation_time": 40.01820969581604,
  "parity": {
    "total_expected": 92,
    "total_generated": 0,
    "coverage": 0.0,
    "missing_tools": [
      "agent_attach",
      "agent_deploy",
      "agent_info",
      "agent_kill",
      "agent_kill_all",
      "agent_list",
      "agent_message",
      "agent_restart",
      "agent_send",
      "agent_status",
      "monitor_dashboard",
      "monitor_logs",
      "monitor_performance",
      "monitor_recovery_logs",
      "monitor_recovery_start",
      "monitor_recovery_status",
      "monitor_recovery_stop",
      "monitor_start",
      "monitor_status",
      "monitor_stop",
      "pm_broadcast",
      "pm_checkin",
      "pm_create",
      "pm_custom_checkin",
      "pm_message",
      "pm_status",
      "context_export",
      "context_list",
      "context_show",
      "context_spawn",
      "team_broadcast",
      "team_deploy",
      "team_list",
      "team_recover",
      "team_status",
      "orchestrator_broadcast",
      "orchestrator_kill",
      "orchestrator_kill_all",
      "orchestrator_list",
      "orchestrator_schedule",
      "orchestrator_start",
      "orchestrator_status",
      "setup_all",
      "setup_check",
      "setup_check_requirements",
      "setup_claude_code",
      "setup_mcp",
      "setup_tmux",
      "setup_vscode",
      "spawn_agent",
      "spawn_orc",
      "spawn_pm",
      "recovery_start",
      "recovery_status",
      "recovery_stop",
      "recovery_test",
      "session_attach",
      "session_list",
      "pubsub_publish",
      "pubsub_read",
      "pubsub_search",
      "pubsub_status",
      "pubsub_fast_publish",
      "pubsub_fast_read",
      "pubsub_fast_stats",
      "pubsub_fast_status",
      "daemon_logs",
      "daemon_restart",
      "daemon_start",
      "daemon_status",
      "daemon_stop",
      "tasks_archive",
      "tasks_create",
      "tasks_distribute",
      "tasks_export",
      "tasks_generate",
      "tasks_list",
      "tasks_status",
      "errors_clear",
      "errors_recent",
      "errors_stats",
      "errors_summary",
      "server_setup",
      "server_start",
      "server_status",
      "server_toggle",
      "server_tools",
      "execute",
      "list",
      "quick_deploy",
      "reflect",
      "status"
    ]
  },
  "command_tests": [
    {
      "name": "Agent Status",
      "command": "tmux-orc agent status --json",
      "success": true,
      "output": "{\n  \"mcp-parity-fix:2\": {\n    \"state\": \"Idle\",\n    \"type\": \"Pm\",\n    \"last_activity\": \"Unknown\",\n    \"current_task\": null\n  },\n  \"mcp-parity-fix:3\": {\n    \"state\": \"Active\",\n    \"type\": \"Mcp Architect\",\n    \"last_activity\": \"Unknown\",\n    \"current_task\": null\n  },\n  \"mcp-parity-fix:4\": {\n    \"state\": \"Active\",\n    \"type\": \"Backend Dev\",\n    \"last_activity\": \"Unknown\",\n    \"current_task\": null\n  },\n  \"mcp-parity-fix:5\": {\n    \"state\": \"Active\",\n    \"type\": \"Qa Engineer\",\n    \"last_activity\": \"Unknown\",\n    \"current_task\": \"simple\"\n  }\n}\n"
    },
    {
      "name": "Monitor Status",
      "command": "tmux-orc monitor status --json",
      "success": true,
      "output": "{\n  \"running\": true,\n  \"daemon_type\": \"idle_monitor\",\n  \"log_file\": \n\"/workspaces/Tmux-Orchestrator/.tmux_orchestrator/logs/idle-monitor.log\",\n  \"pid_file\": \n\"/workspaces/Tmux-Orchestrator/.tmux_orchestrator/idle-monitor.pid\"\n}\n"
    },
    {
      "name": "Team Status",
      "command": "tmux-orc team status --json",
      "success": false,
      "output": "Usage: tmux-orc team status [OPTIONS] SESSION\nTry 'tmux-orc team status --help' for help.\n\nError: Missing argument 'SESSION'.\n"
    },
    {
      "name": "CLI Reflection",
      "command": "tmux-orc reflect --format json",
      "success": true,
      "output": "{\n  \"list\": {\n    \"type\": \"command\",\n    \"help\": \"List all active agents across sessions with comprehensive status.\\n\\n    Provides a system-wide overview of all Claude agents currently running\\n    in tmux sessions, including their specializations, health status, and\\n    recent activity patterns.\\n\\n    Examples:\\n        tmux-orc list                    # Show formatted agent overview\\n        tmux-orc list --json            # JSON output for scripts/monitoring\\n\\n    Agent Information Displayed:\\n        \\u2022 Session name and window location\\n        \\u2022 Agent type and specialization\\n        \\u2022 Current status (Active, Idle, Busy, Error)\\n        \\u2022 Last activity timestamp\\n        \\u2022 Response time and health metrics\\n\\n    Status Indicators:\\n        \\ud83d\\udfe2 Active:  Agent is responsive and working\\n        \\ud83d\\udfe1 Idle:    Agent is waiting for tasks\\n        \\ud83d\\udd35 Busy:    Agent is processing complex work\\n        \\ud83d\\udd34 Error:   Agent encountered issues\\n        \\u26ab Unknown: Status cannot be determined\\n\\n    Use Cases:\\n        \\u2022 System health monitoring\\n        \\u2022 Resource utilization assessment\\n        \\u2022 Identifying unresponsive agents\\n        \\u2022 Planning team deployments\\n        \\u2022 Integration with monitoring tools (JSON)\\n\\n    If no agents are found, provides guidance on deploying teams.\\n    \",\n    \"short_help\": \"\"\n  },\n  \"reflect\": {\n    \"type\": \"command\",\n    \"help\": \"Generate complete CLI command structure via introspection.\\n\\n    Examples:\\n        tmux-orc reflect                     # Tree view of all commands\\n        tmux-orc reflect --format json      # JSON structure for tools\\n        tmux-orc reflect --format markdown  # Markdown documentation\\n    \",\n    \"short_help\": \"\"\n  },\n  \"status\": {\n    \"type\": \"command\",\n    \"help\": \"Display comprehensive system status dashboard and health overview.\\n\\n    Provides a high-level view of the entire TMUX Orchestrator ecosystem,\\n    including all sessions, agents, system health metrics, and operational status.\\n\\n    Examples:\\n        tmux-orc status                  # Show interactive status dashboard\\n        tmux-orc status --json          # JSON output for monitoring systems\\n\\n    Dashboard Information:\\n        \\u2022 Total sessions and attachment status\\n        \\u2022 Agent counts by type and status\\n        \\u2022 System resource utilization\\n        \\u2022 Recent activity patterns\\n        \\u2022 Health alerts and warnings\\n        \\u2022 Performance metrics\\n\\n    System Health Indicators:\\n        \\ud83d\\udfe2 Healthy:   All systems operational\\n        \\ud83d\\udfe1 Warning:   Minor issues detected\\n        \\ud83d\\udd34 Critical:  Major problems requiring attention\\n        \\u26ab Offline:   System not responding\\n\\n    Monitoring Categories:\\n        \\u2022 Session Management: Active sessions and stability\\n        \\u2022 Agent Health: Response times and error rates\\n        \\u2022 Resource Usage: Memory, CPU, and network utilization\\n        \\u2022 Communication: Message delivery and latency\\n        \\u2022 Quality Metrics: Task completion and success rates\\n\\n    Use for regular system health checks, performance monitoring,\\n    and integration with external monitoring and alerting systems.\\n    \",\n    \"short_help\": \"\"\n  },\n  \"quick-deploy\": {\n    \"type\": \"command\",\n    \"help\": \"Rapidly deploy optimized team configurations for immediate productivity.\\n\\n    Creates a complete, ready-to-work team using battle-tested configurations\\n    and role distributions. Perfect for getting projects started quickly.\\n\\n    TEAM_TYPE: Team specialization (frontend, backend, fullstack, testing)\\n    SIZE: Number of agents (recommended: 2-6)\\n\\n    Examples:\\n        tmux-orc quick-deploy frontend 3        # 3-agent frontend team\\n        tmux-orc quick-deploy backend 4         # 4-agent backend team\\n        tmux-orc quick-deploy fullstack 5       # 5-agent fullstack team\\n        tmux-orc quick-deploy testing 2         # 2-agent testing team\\n        tmux-orc quick-deploy frontend 4 --project-name my-app\\n\\n    Optimized Team Configurations:\\n\\n    Frontend (2-6 agents):\\n        2 agents: Developer + PM\\n        3 agents: Developer + UI/UX + PM\\n        4+ agents: + Performance Expert + CSS Specialist\\n\\n    Backend (2-6 agents):\\n        2 agents: API Developer + PM\\n        3 agents: + Database Engineer\\n        4+ agents: + DevOps Engineer + Security Specialist\\n\\n    Fullstack (3-8 agents):\\n        3 agents: Lead + Frontend + Backend\\n        4 agents: + Project Manager\\n        5+ agents: + QA + DevOps + Specialists\\n\\n    Testing (2-4 agents):\\n        2 agents: Manual + Automation Tester\\n        3 agents: + QA Lead\\n        4+ agents: + Performance + Security Tester\\n\\n    Quick Deploy Benefits:\\n        \\u2022 Instant team setup with optimized roles\\n        \\u2022 Pre-configured communication protocols\\n        \\u2022 Battle-tested role distributions\\n        \\u2022 Immediate project context and briefings\\n        \\u2022 No configuration complexity\\n\\n    Perfect for hackathons, quick prototypes, urgent projects,\\n    or when you need a team running in under 2 minutes.\\n    \",\n    \"short_help\": \"\"\n  },\n  \"agent\": {\n    \"type\": \"group\",\n    \"help\": \"Manage individual agents across tmux sessions.\\n\\n    The agent command group provides comprehensive management of Claude agents,\\n    including deployment, messaging, monitoring, and lifecycle operations.\\n\\n    Examples:\\n        tmux-orc agent status                    # Show all agent statuses\\n        tmux-orc agent restart my-project:0     # Restart specific agent\\n        tmux-orc agent message frontend:1 \\\"Please update the UI\\\"\\n        tmux-orc agent info backend:2 --json    # Get detailed agent info\\n        tmux-orc agent kill stuck-session:3     # Terminate unresponsive agent\\n        tmux-orc agent attach my-app:0          # Attach to agent terminal\\n\\n    Target Format:\\n        Most commands accept targets in 'session:window' format (e.g., 'my-project:0')\\n    \",\n    \"short_help\": \"\"\n  },\n  \"monitor\": {\n    \"type\": \"group\",\n    \"help\": \"Advanced monitoring and health management for agent systems.\\n\\n    The monitor command group provides comprehensive monitoring capabilities,\\n    including real-time dashboards, automated recovery, health checks, and\\n    diagnostic tools for maintaining optimal system performance.\\n\\n    Examples:\\n        tmux-orc monitor start --interval 30    # Start monitoring daemon\\n        tmux-orc monitor dashboard              # Live system dashboard\\n        tmux-orc monitor recovery-start         # Start automated recovery\\n        tmux-orc monitor status                 # Check monitoring status\\n        tmux-orc monitor logs -f                # Follow monitor logs\\n\\n    Monitoring Features:\\n        \\u2022 Real-time agent health tracking\\n        \\u2022 Automated failure detection and recovery\\n        \\u2022 Performance metrics and analytics\\n        \\u2022 Interactive dashboard with live updates\\n        \\u2022 Comprehensive logging and diagnostics\\n        \\u2022 Bulletproof idle detection algorithms\\n\\n    Critical for maintaining 24/7 agent operations and ensuring\\n    system reliability in production environments.\\n    \",\n    \"short_help\": \"\"\n  },\n  \"pm\": {\n    \"type\": \"group\",\n    \"help\": \"Project Manager operations and team coordination.\\n\\n    The PM command group provides tools for creating and managing Project Managers,\\n    specialized Claude agents responsible for team coordination, quality assurance,\\n    and project oversight.\\n\\n    Examples:\\n        tmux-orc pm create my-project           # Create PM for project\\n        tmux-orc pm status                      # Check PM and team status\\n        tmux-orc pm checkin                     # Trigger team status review\\n        tmux-orc pm message \\\"Sprint review at 3pm\\\"\\n        tmux-orc pm broadcast \\\"Deploy to staging now\\\"\\n\\n    Project Manager Responsibilities:\\n        \\u2022 Team coordination and communication\\n        \\u2022 Quality standards enforcement\\n        \\u2022 Progress monitoring and reporting\\n        \\u2022 Risk identification and mitigation\\n        \\u2022 Resource allocation and optimization\\n\\n    PM agents work alongside development teams to ensure projects\\n    stay on track and meet quality standards.\\n    \",\n    \"short_help\": \"\"\n  },\n  \"context\": {\n    \"type\": \"group\",\n    \"help\": \"Provide standardized context briefings for common agent roles.\\n\\n    These contexts serve as starting points that can be extended with\\n    project-specific details when spawning agents.\\n\\n    Examples:\\n        tmux-orc context orchestrator    # Show orchestrator briefing\\n        tmux-orc context pm              # Show PM briefing\\n        tmux-orc context list            # List all available contexts\\n    \",\n    \"short_help\": \"\"\n  },\n  \"team\": {\n    \"type\": \"group\",\n    \"help\": \"Manage multi-agent teams across tmux sessions.\\n\\n    The team command group provides comprehensive management of agent teams,\\n    including deployment, monitoring, communication, and recovery operations.\\n    Teams consist of multiple specialized Claude agents working together.\\n\\n    Examples:\\n        tmux-orc team deploy frontend 4         # Deploy 4-agent frontend team\\n        tmux-orc team status my-project         # Check team health\\n        tmux-orc team list                      # Show all active teams\\n        tmux-orc team broadcast frontend \\\"Update status\\\"\\n        tmux-orc team recover stuck-project    # Recover failed agents\\n\\n    Team Types:\\n        \\u2022 frontend:  UI/UX development team\\n        \\u2022 backend:   Server-side development team\\n        \\u2022 fullstack: Full-stack development team\\n        \\u2022 testing:   QA and testing team\\n\\n    Each team includes specialized roles like developers, project managers,\\n    QA engineers, and code reviewers working in coordination.\\n    \",\n    \"short_help\": \"\"\n  },\n  \"orchestrator\": {\n    \"type\": \"group\",\n    \"help\": \"High-level orchestrator operations for system-wide management.\\n\\n    The orchestrator command group provides strategic oversight and coordination\\n    capabilities for managing multiple projects, teams, and agents across the\\n    entire TMUX Orchestrator ecosystem.\\n\\n    Examples:\\n        tmux-orc orchestrator start            # Start main orchestrator\\n        tmux-orc orchestrator status           # System-wide status\\n        tmux-orc orchestrator schedule 30 \\\"Check progress\\\"\\n        tmux-orc orchestrator broadcast \\\"Deploy now\\\"\\n        tmux-orc orchestrator list --all-sessions\\n\\n    Orchestrator Responsibilities:\\n        \\u2022 Strategic project coordination across teams\\n        \\u2022 Resource allocation and optimization\\n        \\u2022 Cross-project dependency management\\n        \\u2022 Quality standards enforcement\\n        \\u2022 System health monitoring and alerts\\n        \\u2022 Automated scheduling and reminders\\n\\n    The orchestrator operates at the highest level, managing Project Managers\\n    who in turn coordinate individual development teams.\\n    \",\n    \"short_help\": \"\"\n  },\n  \"setup\": {\n    \"type\": \"group\",\n    \"help\": \"Setup and configuration commands for development environments.\\n\\n    The setup command group provides automated configuration for various\\n    development tools and environments to work seamlessly with the TMUX\\n    Orchestrator system.\\n\\n    Available Setups:\\n        \\u2022 claude-code: Install slash commands and MCP server\\n        \\u2022 vscode: Configure VS Code tasks and debugging\\n        \\u2022 tmux: Configure tmux with mouse support and keybindings\\n        \\u2022 git-hooks: Install pre-commit hooks for quality\\n\\n    Examples:\\n        tmux-orc setup                  # Check system requirements\\n        tmux-orc setup claude-code      # Setup Claude Code integration\\n        tmux-orc setup vscode ./project # Configure VS Code\\n        tmux-orc setup tmux             # Configure tmux settings\\n        tmux-orc setup all              # Run all setup commands\\n    \",\n    \"short_help\": \"\"\n  },\n  \"spawn\": {\n    \"type\": \"group\",\n    \"help\": \"Spawn orchestrators, project managers, and custom agents.\\n\\n    This is the primary entry point for creating Claude agents in tmux sessions.\\n    Use these commands to spawn various types of agents with appropriate contexts\\n    and configurations. New windows are automatically added to the end of sessions.\\n\\n    Examples:\\n        tmux-orc spawn orc                      # Spawn orchestrator (human entry point)\\n        tmux-orc spawn pm --session proj        # Spawn PM with standard context\\n        tmux-orc spawn agent api-dev proj --briefing \\\"...\\\"  # Custom agent\\n\\n    Agent Types:\\n        - orc: Orchestrator for human interaction (launches new terminal)\\n        - pm: Project Manager with standardized context\\n        - agent: Custom agents with flexible briefings\\n    \",\n    \"short_help\": \"\"\n  },\n  \"spawn-orc\": {\n    \"type\": \"command\",\n    \"help\": \"Launch Claude Code as an orchestrator in a new terminal.\\n\\n    This is the primary entry point for humans to start working with tmux-orchestrator.\\n    It will:\\n    1. Create a new terminal window\\n    2. Launch Claude Code with the --dangerously-skip-permissions flag\\n    3. Automatically load the orchestrator context\\n\\n    After launching, you'll be ready to create feature requests and use /create-prd\\n    to generate PRDs that will spawn autonomous agent teams.\\n    \",\n    \"short_help\": \"\"\n  },\n  \"recovery\": {\n    \"type\": \"group\",\n    \"help\": \"Automatic agent recovery system management.\\n\\n    The recovery system provides continuous monitoring and automatic\\n    recovery of failed Claude agents across all tmux sessions.\\n\\n    Features:\\n        \\u2022 Continuous health monitoring\\n        \\u2022 Automatic failure detection\\n        \\u2022 Context-preserving restarts\\n        \\u2022 Intelligent briefing restoration\\n        \\u2022 Notification throttling\\n        \\u2022 Comprehensive event logging\\n    \",\n    \"short_help\": \"\"\n  },\n  \"session\": {\n    \"type\": \"group\",\n    \"help\": \"Manage tmux sessions for the orchestrator.\\n\\n    Sessions are the top-level containers in tmux that contain one or more windows.\\n    The orchestrator uses sessions to organize different agents and their workspaces.\\n\\n    Examples:\\n        List all tmux sessions:\\n        $ tmux-orc session list\\n\\n        List sessions in JSON format:\\n        $ tmux-orc session list --json\\n\\n        Attach to an existing session:\\n        $ tmux-orc session attach my-session\\n\\n        Attach to a session in read-only mode:\\n        $ tmux-orc session attach my-session --read-only\\n    \",\n    \"short_help\": \"\"\n  },\n  \"pubsub\": {\n    \"type\": \"group\",\n    \"help\": \"Publish/subscribe messaging for agent communication.\\n\\n    Provides a higher-level abstraction over direct tmux messaging,\\n    enabling agents to communicate through CLI commands instead of\\n    shell scripts. Supports both targeted and broadcast messaging.\\n\\n    Examples:\\n        tmux-orc publish --session frontend-dev:0 \\\"Please run tests\\\"\\n        tmux-orc publish --group management \\\"3 agents are idle\\\"\\n        tmux-orc read --session backend-dev:0 --tail 50\\n        tmux-orc subscribe --group management --callback ./handle-message.sh\\n    \",\n    \"short_help\": \"\"\n  },\n  \"pubsub-fast\": {\n    \"type\": \"group\",\n    \"help\": \"High-performance pubsub messaging via daemon backend.\\n    \\n    Target: <100ms message delivery (vs 5000ms CLI overhead).\\n    \\n    Examples:\\n        tmux-orc pubsub-fast publish --target pm:0 \\\"Message\\\"\\n        tmux-orc pubsub-fast read --target qa:0 \\n        tmux-orc pubsub-fast status\\n    \",\n    \"short_help\": \"\"\n  },\n  \"daemon\": {\n    \"type\": \"group\",\n    \"help\": \"Manage high-performance messaging daemon.\\n    \\n    The daemon provides sub-100ms message delivery vs 5000ms CLI overhead.\\n    Essential for real-time agent communication.\\n    \\n    Examples:\\n        tmux-orc daemon start       # Start daemon\\n        tmux-orc daemon stop        # Stop daemon  \\n        tmux-orc daemon status      # Check status\\n        tmux-orc daemon restart     # Restart daemon\\n    \",\n    \"short_help\": \"\"\n  },\n  \"tasks\": {\n    \"type\": \"group\",\n    \"help\": \"Task list management for PRD-driven development workflow.\\n\\n    The tasks command group provides comprehensive task management\\n    capabilities for organizing PRDs, master task lists, and agent-specific\\n    sub-tasks across development teams.\\n\\n    Directory Structure:\\n        .tmux_orchestrator/\\n        \\u251c\\u2500\\u2500 projects/           # Active projects\\n        \\u2502   \\u2514\\u2500\\u2500 {project}/      # Per-project organization\\n        \\u2502       \\u251c\\u2500\\u2500 prd.md      # Product Requirements\\n        \\u2502       \\u251c\\u2500\\u2500 tasks.md    # Master task list\\n        \\u2502       \\u2514\\u2500\\u2500 agents/     # Agent sub-tasks\\n        \\u251c\\u2500\\u2500 templates/          # Reusable templates\\n        \\u2514\\u2500\\u2500 archive/            # Completed projects\\n\\n    Workflow:\\n        1. Create project structure\\n        2. Import or create PRD\\n        3. Generate master task list\\n        4. Distribute to agent teams\\n        5. Track progress\\n        6. Archive when complete\\n\\n    Examples:\\n        tmux-orc tasks create my-feature\\n        tmux-orc tasks import-prd my-feature ./prd.md\\n        tmux-orc tasks distribute my-feature\\n        tmux-orc tasks status my-feature\\n    \",\n    \"short_help\": \"\"\n  },\n  \"execute\": {\n    \"type\": \"command\",\n    \"help\": \"Execute a PRD by deploying an agent team for manual orchestration.\\n\\n    PRD_FILE: Path to the Product Requirements Document\\n\\n    This command sets up a manual orchestration workflow where Claude (you)\\n    acts as the orchestrator to oversee an autonomous AI agent team.\\n\\n    WORKFLOW:\\n    1. Creates project structure and copies PRD\\n    2. Analyzes PRD to suggest optimal team composition\\n    3. Deploys the agent team with role-specific briefings\\n    4. PM agent autonomously reads PRD and creates tasks\\n    5. PM distributes tasks to team members\\n    6. Team works independently with PM coordination\\n    7. You monitor and guide at a high level\\n\\n    ORCHESTRATOR RESPONSIBILITIES:\\n    - Review PRD and approve team composition\\n    - Monitor overall project health\\n    - Make architectural decisions\\n    - Resolve cross-team blockers\\n    - Ensure quality standards\\n    - NOT micromanage individual agents\\n\\n    TEAM COMPOSITION:\\n    - --auto: Analyzes PRD to determine optimal team\\n    - --team-type: Use predefined team templates\\n    - --team-size: Override suggested team size\\n\\n    IMPORTANT: This is NOT automatic PRD parsing. The PM agent reads\\n    the actual PRD document and creates the implementation plan. You\\n    oversee the process but let agents work autonomously.\\n\\n    Examples:\\n        tmux-orc execute ./prd.md\\n        tmux-orc execute ./prd.md --auto\\n        tmux-orc execute ./prd.md --project-name myapp\\n        tmux-orc execute ./prd.md --team-type backend --team-size 4\\n        tmux-orc execute ./prd.md --no-monitor --skip-planning\\n\\n    After execution:\\n        - Monitor PM: tmux-orc read --session project:0\\n        - Check tasks: tmux-orc tasks status project\\n        - View team: tmux-orc team status project\\n        - Message PM: tmux-orc send project:0 \\\"status?\\\"\\n    \",\n    \"short_help\": \"\"\n  },\n  \"errors\": {\n    \"type\": \"group\",\n    \"help\": \"Error management and reporting utilities.\\n\\n    Provides commands for viewing error logs, analyzing error patterns,\\n    and managing error history for the TMUX Orchestrator system.\\n\\n    Examples:\\n        tmux-orc errors summary       # Show error summary\\n        tmux-orc errors recent        # Show recent errors\\n        tmux-orc errors clear         # Clear old error logs\\n        tmux-orc errors stats         # Show error statistics\\n    \",\n    \"short_help\": \"\"\n  },\n  \"server\": {\n    \"type\": \"group\",\n    \"help\": \"MCP server management for Claude integration.\",\n    \"short_help\": \"\"\n  }\n}\n"
    }
  ],
  "performance": {
    "generation_time": 40.01820969581604,
    "meets_requirement": false
  }
}
