name: MCP Server Testing Pipeline

on:
  push:
    branches: [ main, develop, feature/mcp-* ]
    paths:
      - 'tmux_orchestrator/mcp/**'
      - 'tests/mcp/**'
      - 'pyproject.toml'
      - '.github/workflows/mcp-server-test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'tmux_orchestrator/mcp/**'
      - 'tests/mcp/**'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of MCP testing to run'
        required: false
        type: choice
        options:
          - unit
          - integration
          - pip-install
          - performance
          - all
        default: 'integration'

env:
  POETRY_VERSION: "1.6.1"
  PYTHON_VERSION: "3.11"

jobs:
  # MCP Package Structure Validation
  mcp-structure-validation:
    name: "MCP Package Structure Validation"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Validate MCP package structure
      run: |
        echo "🏗️ Validating MCP package structure..."

        # Check required directories exist
        required_dirs=(
          "tmux_orchestrator/mcp"
          "tmux_orchestrator/mcp/tools"
          "tmux_orchestrator/mcp/handlers"
          "tests/mcp"
        )

        for dir in "${required_dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "✅ Directory exists: $dir"
          else
            echo "❌ Missing directory: $dir"
            exit 1
          fi
        done

        # Check required files exist
        required_files=(
          "tmux_orchestrator/mcp/__init__.py"
          "tmux_orchestrator/mcp/tools/__init__.py"
          "tmux_orchestrator/mcp/handlers/__init__.py"
          "tests/mcp/__init__.py"
        )

        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ File exists: $file"
          else
            echo "❌ Missing file: $file"
            exit 1
          fi
        done

        echo "✅ MCP package structure validation passed"

  # FastMCP Dependencies Test
  fastmcp-dependencies:
    name: "FastMCP Dependencies & Installation"
    runs-on: ubuntu-latest
    needs: mcp-structure-validation

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies with FastMCP
      run: |
        echo "📦 Installing dependencies with FastMCP support..."
        poetry install --no-interaction

    - name: Verify FastMCP installation
      run: |
        echo "🔍 Verifying FastMCP installation..."
        poetry run python -c "
        try:
            import fastmcp
            print(f'✅ FastMCP version: {fastmcp.__version__}')

            # Test basic FastMCP functionality
            mcp = fastmcp.FastMCP('test')
            print('✅ FastMCP instance created successfully')

            # Test tool decorator
            @mcp.tool()
            async def test_tool(param: str) -> str:
                return param

            print('✅ FastMCP tool decorator works')

        except ImportError as e:
            print(f'❌ FastMCP import failed: {e}')
            exit(1)
        except Exception as e:
            print(f'❌ FastMCP functionality test failed: {e}')
            exit(1)
        "

    - name: Test MCP package imports
      run: |
        echo "🔍 Testing MCP package imports..."
        poetry run python -c "
        import sys
        from pathlib import Path

        # Test basic MCP package import
        try:
            import tmux_orchestrator.mcp
            print('✅ MCP package imports successfully')
        except ImportError as e:
            print(f'❌ MCP package import failed: {e}')
            exit(1)

        # Test MCP tools import (if implemented)
        try:
            from tmux_orchestrator.mcp.tools import agent_management
            print('✅ MCP tools import successfully')
        except ImportError:
            print('⚠️ MCP tools not yet implemented - expected during development')

        # Test MCP handlers import (if implemented)
        try:
            from tmux_orchestrator.mcp.handlers import agent_handlers
            print('✅ MCP handlers import successfully')
        except ImportError:
            print('⚠️ MCP handlers not yet implemented - expected during development')
        "

  # MCP Unit Tests
  mcp-unit-tests:
    name: "MCP Unit Tests"
    runs-on: ubuntu-latest
    needs: fastmcp-dependencies
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all'

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --no-interaction

    - name: Run MCP unit tests
      run: |
        echo "🧪 Running MCP unit tests..."
        poetry run pytest tests/mcp/ -v --tb=short --maxfail=5

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: mcp-unit-test-results-${{ github.sha }}
        path: |
          .pytest_cache/
          test-results/

  # MCP Integration Tests
  mcp-integration-tests:
    name: "MCP Integration Tests"
    runs-on: ubuntu-latest
    needs: fastmcp-dependencies
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all'

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --no-interaction

    - name: Create MCP integration test
      run: |
        cat > mcp_integration_test.py << 'EOF'
        #!/usr/bin/env python3
        """MCP integration testing."""

        import asyncio
        import sys
        from pathlib import Path

        async def test_mcp_server_integration():
            """Test MCP server integration."""
            print("🔄 Testing MCP server integration...")

            try:
                # Test server import
                from tmux_orchestrator.mcp.server import mcp
                print("✅ MCP server imported successfully")

                # Test if tools are registered
                if hasattr(mcp, '_tools') or hasattr(mcp, 'tools'):
                    print("✅ MCP server has tools registry")

                    # Try to get tool list
                    tools = getattr(mcp, '_tools', {}) or getattr(mcp, 'tools', {})
                    print(f"📊 Registered tools: {len(tools)}")

                    # Check for Phase 1 tools
                    phase1_tools = [
                        'spawn_agent',
                        'send_message',
                        'get_agent_status',
                        'kill_agent'
                    ]

                    found_tools = []
                    for tool_name in phase1_tools:
                        if tool_name in tools:
                            found_tools.append(tool_name)
                            print(f"✅ Found Phase 1 tool: {tool_name}")
                        else:
                            print(f"⚠️ Phase 1 tool not found: {tool_name}")

                    if found_tools:
                        print(f"✅ Found {len(found_tools)}/{len(phase1_tools)} Phase 1 tools")
                    else:
                        print("⚠️ No Phase 1 tools found - may be expected during development")

                return True

            except ImportError as e:
                print(f"⚠️ MCP server not yet implemented: {e}")
                return True  # Expected during development
            except Exception as e:
                print(f"❌ MCP integration test failed: {e}")
                return False

        async def test_mcp_tools_integration():
            """Test MCP tools integration."""
            print("\n🔧 Testing MCP tools integration...")

            try:
                # Test Phase 1 tools import
                from tmux_orchestrator.mcp.tools.agent_management import (
                    spawn_agent, send_message, get_agent_status, kill_agent
                )

                print("✅ Phase 1 tools imported successfully")

                # Test tool signatures
                import inspect

                tools = {
                    'spawn_agent': spawn_agent,
                    'send_message': send_message,
                    'get_agent_status': get_agent_status,
                    'kill_agent': kill_agent
                }

                for tool_name, tool_func in tools.items():
                    sig = inspect.signature(tool_func)
                    print(f"✅ {tool_name}: {len(sig.parameters)} parameters")

                return True

            except ImportError as e:
                print(f"⚠️ MCP tools not yet implemented: {e}")
                return True  # Expected during development
            except Exception as e:
                print(f"❌ MCP tools integration test failed: {e}")
                return False

        async def main():
            """Run all integration tests."""
            print("🚀 MCP Integration Testing")
            print("=" * 40)

            server_ok = await test_mcp_server_integration()
            tools_ok = await test_mcp_tools_integration()

            print(f"\n📊 Integration Test Results:")
            print(f"Server: {'✅ PASS' if server_ok else '❌ FAIL'}")
            print(f"Tools: {'✅ PASS' if tools_ok else '❌ FAIL'}")

            if server_ok and tools_ok:
                print("\n🎉 MCP integration tests PASSED!")
                return True
            else:
                print("\n💥 MCP integration tests FAILED!")
                return False

        if __name__ == "__main__":
            success = asyncio.run(main())
            sys.exit(0 if success else 1)
        EOF

    - name: Run MCP integration test
      run: |
        python mcp_integration_test.py

  # Pip Installation Tests
  pip-install-tests:
    name: "Pip Installation Tests"
    runs-on: ubuntu-latest
    needs: mcp-structure-validation
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.test_type == 'pip-install' || github.event.inputs.test_type == 'all'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Test pip installation workflow
      run: |
        echo "📦 Testing pip installation workflow..."

        # Test building the package
        echo "🏗️ Building wheel package..."
        python -m pip install build
        python -m build

        # Test package installation
        echo "📦 Installing package..."
        pip install dist/*.whl

        # Test CLI availability
        echo "🧪 Testing CLI installation..."
        tmux-orc --version
        tmux-orc --help

        # Test MCP server entry point
        echo "🔧 Testing MCP server entry point..."
        python -c "
        import sys
        try:
            from tmux_orchestrator.mcp_server import main
            print('✅ MCP server entry point available')
        except ImportError as e:
            print(f'❌ MCP server import failed: {e}')
            sys.exit(1)
        "

        # Test setup command exists
        echo "⚙️ Testing setup command availability..."
        tmux-orc setup --help || echo "⚠️ Setup command not yet implemented"

        echo "✅ Pip installation test completed"

  # MCP Performance Tests
  mcp-performance-tests:
    name: "MCP Performance Tests"
    runs-on: ubuntu-latest
    needs: fastmcp-dependencies
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == 'all'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --no-interaction

    - name: Run MCP performance tests
      run: |
        echo "⚡ Running MCP performance tests..."

        # Run FastMCP performance benchmarks
        poetry run python -c "
        import asyncio
        import time
        import json

        async def test_fastmcp_performance():
            print('Testing FastMCP performance...')

            # Test FastMCP setup time
            start = time.perf_counter()
            try:
                import fastmcp
                mcp = fastmcp.FastMCP('perf-test')

                @mcp.tool()
                async def test_tool(param: str) -> str:
                    return param

                setup_time = time.perf_counter() - start

                # Performance criteria
                max_setup_time = 0.1  # 100ms
                passed = setup_time < max_setup_time

                result = {
                    'fastmcp_setup_time': setup_time,
                    'max_allowed_time': max_setup_time,
                    'passed': passed,
                    'timestamp': time.time()
                }

                print(f'FastMCP setup time: {setup_time:.3f}s')
                print(f'Performance target: <{max_setup_time}s')
                print(f'Result: {'PASS' if passed else 'FAIL'}')

                # Save results
                with open('mcp_performance_results.json', 'w') as f:
                    json.dump(result, f, indent=2)

                return passed

            except ImportError:
                print('FastMCP not available for performance testing')
                return True  # Skip test if not available

        success = asyncio.run(test_fastmcp_performance())
        exit(0 if success else 1)
        "

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: mcp-performance-results-${{ github.sha }}
        path: mcp_performance_results.json

  # MCP Pipeline Summary
  mcp-test-summary:
    name: "MCP Testing Pipeline Summary"
    runs-on: ubuntu-latest
    needs: [mcp-structure-validation, fastmcp-dependencies, mcp-unit-tests, mcp-integration-tests, pip-install-tests, mcp-performance-tests]
    if: always()

    steps:
    - name: MCP Testing Summary
      run: |
        echo "📊 MCP Testing Pipeline Summary"
        echo "=============================="
        echo ""
        echo "Structure Validation: ${{ needs.mcp-structure-validation.result }}"
        echo "FastMCP Dependencies: ${{ needs.fastmcp-dependencies.result }}"
        echo "Unit Tests: ${{ needs.mcp-unit-tests.result }}"
        echo "Integration Tests: ${{ needs.mcp-integration-tests.result }}"
        echo "Docker Tests: ${{ needs.docker-mcp-tests.result }}"
        echo "Performance Tests: ${{ needs.mcp-performance-tests.result }}"
        echo ""

        # Check overall success
        if [[ "${{ needs.mcp-structure-validation.result }}" == "success" && \
              "${{ needs.fastmcp-dependencies.result }}" == "success" ]]; then
          echo "✅ Core MCP infrastructure: READY"

          # Check implementation status
          test_results=()
          if [[ "${{ needs.mcp-unit-tests.result }}" == "success" ]]; then
            test_results+=("Unit Tests: ✅")
          else
            test_results+=("Unit Tests: ⚠️")
          fi

          if [[ "${{ needs.mcp-integration-tests.result }}" == "success" ]]; then
            test_results+=("Integration: ✅")
          else
            test_results+=("Integration: ⚠️")
          fi

          if [[ "${{ needs.pip-install-tests.result }}" == "success" ]]; then
            test_results+=("Pip Install: ✅")
          else
            test_results+=("Pip Install: ⚠️")
          fi

          if [[ "${{ needs.mcp-performance-tests.result }}" == "success" ]]; then
            test_results+=("Performance: ✅")
          else
            test_results+=("Performance: ⚠️")
          fi

          echo "📋 Test Results:"
          printf '%s\n' "${test_results[@]}"

          echo ""
          echo "🚀 MCP infrastructure ready for Phase 1 implementation!"
        else
          echo "❌ MCP infrastructure setup FAILED"
          echo "🔧 Review failed jobs before proceeding"
          exit 1
        fi
