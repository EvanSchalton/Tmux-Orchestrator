name: Phase 1 FastMCP Pipeline

on:
  push:
    branches: [ main, develop, feature/fastmcp-* ]
  pull_request:
    branches: [ main ]
    paths:
      - 'tmux_orchestrator/mcp/**'
      - 'tmux_orchestrator/core/agent_operations/**'
      - 'tests/mcp/**'
      - '.github/workflows/fastmcp-phase1-pipeline.yml'
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: false
        type: choice
        options:
          - unit
          - integration
          - end-to-end
        default: 'integration'

env:
  POETRY_VERSION: "1.6.1"
  PYTHON_VERSION: "3.11"

jobs:
  # Phase 1 FastMCP Quality Gate
  fastmcp-quality-gate:
    name: "FastMCP Phase 1 - Quality Gate"
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: fastmcp-venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Check FastMCP dependency
      run: |
        echo "🔍 Checking FastMCP installation..."
        poetry run python -c "
        try:
            import fastmcp
            print(f'✅ FastMCP version: {fastmcp.__version__}')
        except ImportError as e:
            print(f'❌ FastMCP not available: {e}')
            exit(1)
        "

    - name: Run FastMCP specific linting
      run: |
        echo "🔧 Running FastMCP-specific linting..."
        poetry run ruff check tmux_orchestrator/mcp/ || echo "MCP directory not found yet"
        poetry run mypy tmux_orchestrator/mcp/ || echo "MCP directory not found yet"

    - name: Run FastMCP tool tests
      run: |
        echo "🧪 Running FastMCP tool tests..."
        poetry run pytest tests/mcp/ -v || echo "MCP tests not found yet"

  # Phase 1 Tool Implementation Validation
  fastmcp-tool-validation:
    name: "FastMCP Phase 1 - Tool Validation"
    runs-on: ubuntu-latest
    needs: fastmcp-quality-gate

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --no-interaction

    - name: Create FastMCP tool validation script
      run: |
        cat > validate_fastmcp_tools.py << 'EOF'
        #!/usr/bin/env python3
        """Validate Phase 1 FastMCP tools implementation."""

        import asyncio
        import sys
        from pathlib import Path

        async def validate_fastmcp_structure():
            """Validate FastMCP directory structure."""
            print("🏗️ Validating FastMCP directory structure...")

            required_files = [
                "tmux_orchestrator/mcp/__init__.py",
                "tmux_orchestrator/mcp/server.py",
                "tmux_orchestrator/mcp/tools/__init__.py",
                "tmux_orchestrator/mcp/tools/agent_management.py",
                "tmux_orchestrator/mcp/handlers/__init__.py",
                "tmux_orchestrator/mcp/handlers/agent_handlers.py"
            ]

            missing_files = []
            for file_path in required_files:
                if not Path(file_path).exists():
                    missing_files.append(file_path)
                    print(f"❌ Missing: {file_path}")
                else:
                    print(f"✅ Found: {file_path}")

            if missing_files:
                print(f"\n❌ Missing {len(missing_files)} required files")
                return False

            print("\n✅ FastMCP structure validation passed")
            return True

        async def validate_tool_implementations():
            """Validate Phase 1 tool implementations."""
            print("\n🔧 Validating Phase 1 tool implementations...")

            try:
                # Try to import FastMCP tools
                sys.path.insert(0, str(Path.cwd()))

                # Check if we can import the tools module
                try:
                    from tmux_orchestrator.mcp.tools.agent_management import (
                        spawn_agent,
                        send_message,
                        get_agent_status,
                        kill_agent
                    )
                    print("✅ All Phase 1 tools imported successfully")

                    # Validate tool signatures
                    tools = {
                        "spawn_agent": spawn_agent,
                        "send_message": send_message,
                        "get_agent_status": get_agent_status,
                        "kill_agent": kill_agent
                    }

                    for tool_name, tool_func in tools.items():
                        if hasattr(tool_func, '__annotations__'):
                            print(f"✅ {tool_name}: Type annotations present")
                        else:
                            print(f"⚠️ {tool_name}: Missing type annotations")

                    return True

                except ImportError as e:
                    print(f"❌ Failed to import Phase 1 tools: {e}")
                    return False

            except Exception as e:
                print(f"❌ Tool validation failed: {e}")
                return False

        async def validate_fastmcp_server():
            """Validate FastMCP server setup."""
            print("\n🌐 Validating FastMCP server setup...")

            try:
                from tmux_orchestrator.mcp.server import mcp
                print(f"✅ FastMCP server instance created: {type(mcp)}")

                # Check if tools are registered
                if hasattr(mcp, '_tools') or hasattr(mcp, 'tools'):
                    print("✅ FastMCP server has tools registry")
                else:
                    print("⚠️ FastMCP server tools registry not found")

                return True

            except ImportError as e:
                print(f"❌ Failed to import FastMCP server: {e}")
                return False
            except Exception as e:
                print(f"❌ FastMCP server validation failed: {e}")
                return False

        async def main():
            """Run all validations."""
            print("🚀 Phase 1 FastMCP Validation")
            print("=" * 50)

            structure_ok = await validate_fastmcp_structure()
            tools_ok = await validate_tool_implementations() if structure_ok else False
            server_ok = await validate_fastmcp_server() if structure_ok else False

            print("\n📊 Validation Summary:")
            print(f"Structure: {'✅ PASS' if structure_ok else '❌ FAIL'}")
            print(f"Tools: {'✅ PASS' if tools_ok else '❌ FAIL'}")
            print(f"Server: {'✅ PASS' if server_ok else '❌ FAIL'}")

            if structure_ok and tools_ok and server_ok:
                print("\n🎉 Phase 1 FastMCP validation PASSED!")
                return True
            else:
                print("\n💥 Phase 1 FastMCP validation FAILED!")
                return False

        if __name__ == "__main__":
            success = asyncio.run(main())
            sys.exit(0 if success else 1)
        EOF

    - name: Run FastMCP validation
      run: |
        python validate_fastmcp_tools.py

  # Performance Testing for FastMCP
  fastmcp-performance:
    name: "FastMCP Phase 1 - Performance Testing"
    runs-on: ubuntu-latest
    needs: fastmcp-tool-validation
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux time

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --no-interaction

    - name: Create FastMCP performance test
      run: |
        cat > fastmcp_performance_test.py << 'EOF'
        #!/usr/bin/env python3
        """Performance testing for FastMCP Phase 1 tools."""

        import asyncio
        import time
        import json
        from pathlib import Path

        async def test_fastmcp_tool_performance():
            """Test FastMCP tool performance requirements."""
            print("⚡ Testing FastMCP tool performance...")

            # Phase 1 tools to test
            tools_to_test = [
                "spawn_agent",
                "send_message",
                "get_agent_status",
                "kill_agent"
            ]

            results = []

            try:
                # Import FastMCP server
                from tmux_orchestrator.mcp.server import mcp

                for tool_name in tools_to_test:
                    print(f"🔧 Testing {tool_name} performance...")

                    # Simulate tool call performance
                    start_time = time.perf_counter()

                    # Test tool discovery/metadata retrieval
                    try:
                        # This tests the FastMCP framework overhead
                        if hasattr(mcp, '_tools'):
                            tools = getattr(mcp, '_tools', {})
                            if tool_name in tools:
                                tool_info = tools[tool_name]
                                print(f"✅ {tool_name} discovered in {time.perf_counter() - start_time:.3f}s")

                        end_time = time.perf_counter()
                        duration = end_time - start_time

                        results.append({
                            "tool": tool_name,
                            "duration": duration,
                            "passed": duration < 0.1  # FastMCP discovery should be very fast
                        })

                    except Exception as e:
                        print(f"❌ {tool_name} test failed: {e}")
                        results.append({
                            "tool": tool_name,
                            "duration": 999.0,
                            "passed": False,
                            "error": str(e)
                        })

                # Save results
                with open("fastmcp_performance_results.json", "w") as f:
                    json.dump({
                        "timestamp": time.time(),
                        "results": results,
                        "summary": {
                            "total_tools": len(tools_to_test),
                            "passed": len([r for r in results if r["passed"]]),
                            "avg_duration": sum(r["duration"] for r in results) / len(results)
                        }
                    }, f, indent=2)

                # Check performance criteria
                passed_count = len([r for r in results if r["passed"]])
                avg_duration = sum(r["duration"] for r in results) / len(results)

                print(f"\n📊 Performance Results:")
                print(f"Tools tested: {len(tools_to_test)}")
                print(f"Passed: {passed_count}/{len(tools_to_test)}")
                print(f"Average duration: {avg_duration:.3f}s")

                if passed_count == len(tools_to_test):
                    print("✅ FastMCP performance test PASSED")
                    return True
                else:
                    print("❌ FastMCP performance test FAILED")
                    return False

            except ImportError as e:
                print(f"❌ Could not import FastMCP server: {e}")
                return False
            except Exception as e:
                print(f"❌ Performance test failed: {e}")
                return False

        async def main():
            success = await test_fastmcp_tool_performance()
            return success

        if __name__ == "__main__":
            success = asyncio.run(main())
            exit(0 if success else 1)
        EOF

    - name: Run FastMCP performance test
      run: |
        python fastmcp_performance_test.py

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: fastmcp-performance-results-${{ github.sha }}
        path: fastmcp_performance_results.json

  # Integration Testing
  fastmcp-integration:
    name: "FastMCP Phase 1 - Integration Testing"
    runs-on: ubuntu-latest
    needs: fastmcp-tool-validation
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_level == 'integration'

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tmux

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --no-interaction

    - name: Run FastMCP integration tests
      run: |
        echo "🔄 Running FastMCP integration tests..."
        poetry run pytest tests/mcp/test_integration_phase1.py -v || echo "Integration tests not implemented yet"

  # Summary Job
  fastmcp-phase1-summary:
    name: "FastMCP Phase 1 - Pipeline Summary"
    runs-on: ubuntu-latest
    needs: [fastmcp-quality-gate, fastmcp-tool-validation, fastmcp-performance]
    if: always()

    steps:
    - name: FastMCP Phase 1 Summary
      run: |
        echo "📊 FastMCP Phase 1 Pipeline Summary"
        echo "=================================="
        echo ""
        echo "Quality Gate: ${{ needs.fastmcp-quality-gate.result }}"
        echo "Tool Validation: ${{ needs.fastmcp-tool-validation.result }}"
        echo "Performance: ${{ needs.fastmcp-performance.result }}"
        echo ""

        if [[ "${{ needs.fastmcp-quality-gate.result }}" == "success" && \
              "${{ needs.fastmcp-tool-validation.result }}" == "success" && \
              "${{ needs.fastmcp-performance.result }}" == "success" ]]; then
          echo "✅ FastMCP Phase 1: ALL CHECKS PASSED"
          echo "🚀 Ready for Phase 1 implementation completion"
        else
          echo "❌ FastMCP Phase 1: SOME CHECKS FAILED"
          echo "🔧 Review failed jobs before proceeding"
        fi
